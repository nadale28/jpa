
단방향, 양방향
굳이 양방향을 사용할 이유는 없어 보인다.
단방향 ManyToOne만 사용해도 될 것 같다.

굳이 양항뱡을 쓰는 경우에는
어쨋든 누가 관리주체인지 정해줘야한다.

에를 들어 
Member - Order 테이블이 있다고 하자.
이경우 보통 db설계할때 Order 테이블에 member_id가 외래키로 설정될 것이다. 

그런데 jpa 입장에서 이걸 어떻게 알 수 있을까?
jpa가 알 수 있게 member 엔티티의 order에 mappedBy 속성을 설정해준다.

보통 외래키가 있는 테이블... 
@ManyToOne을 사용하는 엔티티가 관리주체가 된다.

이렇게 설정하면 이제...
Member.getOrders();
이런식으로 회원의 주문내역을 가져올 수 있다.

근데 굳이...?
결국 가져오고 싶은건 주문내역이다.
주문 테이블을 조회하려고 하는거다.
select * from Order where member_id = '1';
그렇지 않은가?
단방향으로 설계하면 깔끔한데 너무 복잡하다.
물론 양방향으로 설계하면 편의성이 더 좋아지겠지만...
난 직관적인 단방향으로 설계하는게 맘에 든다.

@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
한테이블에서 처리하는 전략
@DiscriminatorColumn(name="dtype")
구분컬럼...

Book Entity는 아래와 같이 dtype = B 로 구분
@DiscriminatorValue("B")

@Enumerated(EnumType.STRING)
enum 사용, code 느낌
기본값인 EnumType.ORDINARY 는 1,2 숫자로 들어가게 되는데
누군가 중간에 값을 넣는다면?
READY, STOP, COMP
이러면 DB가 꼬이기 때문에 그냥 STRING을 쓰는게 좋다.

OneToOne
일대일 관계의 경우... 어디가 관리주체가 될까?
애매하다.
자주 사용하는 엔티티를 관리주체로 한다.

* 엔티티 설계 주의! *

1. Setter는 사용하지 말자. 
 유지보수가 어렵다.
2. 모든 연관관계는 지연로딩으로 설정하자
 즉시로딩은 연관관계가 되어있는 엔티티들을 모두 join 해버리기 때문에
 성능도 떨어지고 예측이 어렵다.
 예를 들면 JPQL을 사용하여 order를 조회한다고 하면
 일단 order를 조회하기 위해 select * from order; 가 실행된다. (조회된 주문건수 100건)
 문제는 그 다음 order에 있는 member를 가져오기 위해 member 쿼리가 100번 실행되게 된다.
 OneToMany는 기본이 lazy
 OneToOne과 ManyToOne은 기본이 EAGER
3. cascade = CascadeType.ALL
order 저장할때 delivery까지 같이 저장해주고 그런거
4. 연관관계 편입 메서드
양방향의 경우
order 엔티티에서 member를 세팅할 때... order와 member 엔티티 두군데에다 다 넣어줘야한다.
public void setMember(Member member){
	this.member = member;
	member.getOrders().add(this);
}
setMember를 이렇게 만들어주면 편하다.



transactional
javax 
spring 
spring 꺼가 더 쓸만한게 많다.

@transactional(readOnly=true)
이렇게 설정하면 읽기만 하는 기능들 성능이 올라간다고한다.

insert가 필요한 곳에서는
@transactional만 사용하고

jpql의 한계
동적쿼리를 짜기가 너무 어렵다
소스가 더러워짐


spring validation 기능
@NotEmpty(message="이름은 필수입니다.")

entity를 반환하는 건 좋지않다.
민감한 정보가 노출될 수도 있고
api 스펙이 변해버리기 떄문이다.
반환하는 dto를 따로 사용하는게 좋다.


! 변경감지와 병합

준영속 엔티티?
영속성컨텍스트가 더이상 관리하지 않는 엔티티

예를들면 프론트에서 보낸 폼데이터를 기반으로
엔티티를 생성했다던지
book.setId(param.get("id"));
book.setPrice(param.get(param.get("price")))

그럼 어떻게 관리하게 만들까
@Transactional
public void updateItem(){
	Item findItem = itemRepository.findOne(itemId);
	findItem.setPrice(param.getPrice());
	findItem.setStock(param.getStock)
}

플러시
영속성컨텍스트 중 변경된 거를 찾아서 쿼리를 날린다.


book.setName("ss");

//변경감지
update 쿼리가 호출된다.

또는 merge를 사용
근데 merge는 특정 컬럼만 update가 되지않고
설정하지 않은 컬럼은 null 값으로 채워지게 된다. 

변경감지를 사용하는게 좋다.
하지만 그렇다고 여기저기 set을 남발하면 유지보수가 어렵고
의미있는 메서드로 만들어서 사용하는게 좋다
item.chagePrice(); 처럼


public CreateMemberResponse saveMemberV1(@RequestBody @Valid Member member){

이런식으로 엔티티를 사용하는건 좋지않다.
api 명세가 바뀔수도 있고 검색조건같은 파라미터가 있다면? 이걸 엔티티에 넣는다?
dto를 만드는게 맞다


! distinct
db의 distinct와 jpa의 distinct는 다르다.
만약 주문번호 4번에 jpabook1, jpabook2 item이 두개라고 하자.
이걸 쿼리로 조인한다면 
id : 4 - jpabook1
id : 4 - jpabook2
이렇게 나와서 distinct 의미가 없어진다.
하지만 jpa는 
id:4 - item List (jpabook1, jpabook2) 이렇게 나타내준다.

!!! 근데 어마어마한 단점... 페이징 불가... 아예 불가는 아니지만 db에서 페이징을 못하니까 메모리에서 해결하려고 한다. 그럼 메모리 터지는거
1:N 관계를 패치 조인한다? 페이징 안된다~~

!!! 그리고 컬렉션 둘 이상에 패치 조인을 사용하는건 위험하다.

? 그럼 어떻게 해결할까
1. OneToOne, ManyToOne 관계는 일단 패치 조인한다.
2. 컬렉션은 지연로딩으로 처리한다.
3. 지연로딩 최적화를 위해 default_batch_fetch_size 또는 @BatchSize(개별적용필요시)를 적용한다.
application.yml 에         default_batch_fetch_size=100 추가
이렇게 하면 where order_id in (4,11); 이런식으로 쿼리 한번으로 해결해준다.

다른방법
toOne 관계는 패치 조인을 이용한다.
그리고 나서 items를 LAZY 로딩한다.
이 방법은 단건 조회시에는 쓸만하다. (페이징이 필요없는)
보통 mybatis에서 쓰는 방식이랑 비슷하네
어쨋든 이 방식은 여러개를 조회하려면 N+1 문제에 막힌다.

다른방법
toOne 관계는 패치 조인을 이용한다.
그리고 나서 items를 in절로 불러온다.

다른방법
그냥 다 join한다.
그 다음 stream을 이용하여 데이터 정제...

복잡하네... 어떻게 하는게 좋을까
toOne 페치조인
켈렉션은 LAZY + betch_size 사용

안되면 dto 조회 방식 사용

그래도 안되면 nativeSQL



OSIV???
Open Session In View

지연로딩이 가능한 이유?
영속성 컨텍스트가 살아있기 때문... 이건 곧 데이터베이스 커넥션 리소스가 유지된다는 이야기
근데 커넥션이 길게 유지되면 커넥션이 꽉차버릴수도 있다...










